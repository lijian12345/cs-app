gdb bomb
disas bomb
info functions

disas phase_1:
  0x0000000000400ee0 <+0>:     sub    $0x8,%rsp                 // Align stack frame
  0x0000000000400ee4 <+4>:     mov    $0x402400,%esi            // Save a argument
  0x0000000000400ee9 <+9>:     callq  0x401338 <strings_not_equal>    // call strings_not_equal
  0x0000000000400eee <+14>:    test   %eax,%eax                 // test if %eax is 0
  0x0000000000400ef0 <+16>:    je     0x400ef7 <phase_1+23>           
  0x0000000000400ef2 <+18>:    callq  0x40143a <explode_bomb>
  0x0000000000400ef7 <+23>:    add    $0x8,%rsp                 // if is 0, stack pointer restore
  0x0000000000400efb <+27>:    retq  

    So string is in $0x402400

x/s 0x402400:
    "Border relations with Canada have never been better."

disas phase_2:
  0x0000000000400efc <+0>:     push   %rbp              // Save %rbp
  0x0000000000400efd <+1>:     push   %rbx              // Save %rbx
  0x0000000000400efe <+2>:     sub    $0x28,%rsp        // Align stack frame
  0x0000000000400f02 <+6>:     mov    %rsp,%rsi         // Pass a argument (&b)
  0x0000000000400f05 <+9>:     callq  0x40145c <read_six_numbers>
  0x0000000000400f0a <+14>:    cmpl   $0x1,(%rsp)       // if *b == 1   
  0x0000000000400f0e <+18>:    je     0x400f30 <phase_2+52>
  0x0000000000400f10 <+20>:    callq  0x40143a <explode_bomb>
  0x0000000000400f15 <+25>:    jmp    0x400f30 <phase_2+52>
  0x0000000000400f17 <+27>:    mov    -0x4(%rbx),%eax   // %eax = %rbx - 4 (1)
  0x0000000000400f1a <+30>:    add    %eax,%eax         // %eax *= 2
  0x0000000000400f1c <+32>:    cmp    %eax,(%rbx)       // so *(b + 4) is 2
  0x0000000000400f1e <+34>:    je     0x400f25 <phase_2+41>
  0x0000000000400f20 <+36>:    callq  0x40143a <explode_bomb>
  0x0000000000400f25 <+41>:    add    $0x4,%rbx          
  0x0000000000400f29 <+45>:    cmp    %rbp,%rbx
  0x0000000000400f2c <+48>:    jne    0x400f17 <phase_2+27>
  0x0000000000400f2e <+50>:    jmp    0x400f3c <phase_2+64>
  0x0000000000400f30 <+52>:    lea    0x4(%rsp),%rbx        // %rbx = *(b + 4)
  0x0000000000400f35 <+57>:    lea    0x18(%rsp),%rbp       // %rbp = *(b + 24)
  0x0000000000400f3a <+62>:    jmp    0x400f17 <phase_2+27>
  0x0000000000400f3c <+64>:    add    $0x28,%rsp
  0x0000000000400f40 <+68>:    pop    %rbx
  0x0000000000400f41 <+69>:    pop    %rbp
  0x0000000000400f42 <+70>:    retq   

    So firstly we read six numbers from &b, then we can find this program is a loop (from 1 to 32).
    The answer is "1 2 4 8 16 32", from the start i consume the answer is "32 16 8 4 2 1", then i debug.
  b phase_2: 
  ni: until 0x0000000000400f10
  p $rsp: 0x7fffffffd970
  x/d 0x7fffffffd970: 32, so the answer is "1 2 4 8 16 32"

disas phase_3:
  0x0000000000400f43 <+0>:     sub    $0x18,%rsp
  0x0000000000400f47 <+4>:     lea    0xc(%rsp),%rcx    // 2nd argument
  0x0000000000400f4c <+9>:     lea    0x8(%rsp),%rdx    // 1st argument
  0x0000000000400f51 <+14>:    mov    $0x4025cf,%esi    // "%d %d"
  0x0000000000400f56 <+19>:    mov    $0x0,%eax
  0x0000000000400f5b <+24>:    callq  0x400bf0 <__isoc99_sscanf@plt>
  0x0000000000400f60 <+29>:    cmp    $0x1,%eax         // eax > 1
  0x0000000000400f63 <+32>:    jg     0x400f6a <phase_3+39>
  0x0000000000400f65 <+34>:    callq  0x40143a <explode_bomb>
  0x0000000000400f6a <+39>:    cmpl   $0x7,0x8(%rsp)    // rdx < 7
  0x0000000000400f6f <+44>:    ja     0x400fad <phase_3+106>
  0x0000000000400f71 <+46>:    mov    0x8(%rsp),%eax    // eax = rdx
  0x0000000000400f75 <+50>:    jmpq   *0x402470(,%rax,8)    // jmp table 
  0x0000000000400f7c <+57>:    mov    $0xcf,%eax        
  0x0000000000400f81 <+62>:    jmp    0x400fbe <phase_3+123>
  0x0000000000400f83 <+64>:    mov    $0x2c3,%eax
  0x0000000000400f88 <+69>:    jmp    0x400fbe <phase_3+123>
  0x0000000000400f8a <+71>:    mov    $0x100,%eax
  0x0000000000400f8f <+76>:    jmp    0x400fbe <phase_3+123>
  0x0000000000400f91 <+78>:    mov    $0x185,%eax
  0x0000000000400f96 <+83>:    jmp    0x400fbe <phase_3+123>
  0x0000000000400f98 <+85>:    mov    $0xce,%eax
  0x0000000000400f9d <+90>:    jmp    0x400fbe <phase_3+123>
  0x0000000000400f9f <+92>:    mov    $0x2aa,%eax
  0x0000000000400fa4 <+97>:    jmp    0x400fbe <phase_3+123>
  0x0000000000400fa6 <+99>:    mov    $0x147,%eax
  0x0000000000400fab <+104>:   jmp    0x400fbe <phase_3+123>
  0x0000000000400fad <+106>:   callq  0x40143a <explode_bomb>
  0x0000000000400fb2 <+111>:   mov    $0x0,%eax
  0x0000000000400fb7 <+116>:   jmp    0x400fbe <phase_3+123>
  0x0000000000400fb9 <+118>:   mov    $0x137,%eax
  0x0000000000400fbe <+123>:   cmp    0xc(%rsp),%eax    // rcx == eax
  0x0000000000400fc2 <+127>:   je     0x400fc9 <phase_3+134>
  0x0000000000400fc4 <+129>:   callq  0x40143a <explode_bomb>
  0x0000000000400fc9 <+134>:   add    $0x18,%rsp
  0x0000000000400fcd <+138>:   retq   

    So we can find a jmp table from this phase, then we can ensure it is a 'switch' case, go ahead we can know the table as following:

    0   207   0xcf    x 0x402470 = 0x00400f7c    
    1   311   0x137   x 0x402470+8 = 0x00400fb9
    2   707   0x2c3   x 0x402470+16 = 0x00400f83
    3   256   ...     ...
    4   389   ...     ...
    5   206   ...     ...
    6   682   ...     ...
    7   327   ...     ...   

disas phase_4:
  0x000000000040100c <+0>:     sub    $0x18,%rsp
  0x0000000000401010 <+4>:     lea    0xc(%rsp),%rcx
  0x0000000000401015 <+9>:     lea    0x8(%rsp),%rdx
  0x000000000040101a <+14>:    mov    $0x4025cf,%esi
  0x000000000040101f <+19>:    mov    $0x0,%eax
  0x0000000000401024 <+24>:    callq  0x400bf0 <__isoc99_sscanf@plt>
  0x0000000000401029 <+29>:    cmp    $0x2,%eax
  0x000000000040102c <+32>:    jne    0x401035 <phase_4+41>
  0x000000000040102e <+34>:    cmpl   $0xe,0x8(%rsp)            // rdx <= 0xe
  0x0000000000401033 <+39>:    jbe    0x40103a <phase_4+46>
  0x0000000000401035 <+41>:    callq  0x40143a <explode_bomb>
  0x000000000040103a <+46>:    mov    $0xe,%edx                 // 3rd arg is 0xe 
  0x000000000040103f <+51>:    mov    $0x0,%esi                 // 2nd arg is 0 
  0x0000000000401044 <+56>:    mov    0x8(%rsp),%edi            // 1st arg is rdx 
  0x0000000000401048 <+60>:    callq  0x400fce <func4>
  0x000000000040104d <+65>:    test   %eax,%eax                 // eax must be 0
  0x000000000040104f <+67>:    jne    0x401058 <phase_4+76>
  0x0000000000401051 <+69>:    cmpl   $0x0,0xc(%rsp)            // rcx == 0
  0x0000000000401056 <+74>:    je     0x40105d <phase_4+81>
  0x0000000000401058 <+76>:    callq  0x40143a <explode_bomb>
  0x000000000040105d <+81>:    add    $0x18,%rsp
  0x0000000000401061 <+85>:    retq   

  disas func4:                                      
  0x0000000000400fce <+0>:     sub    $0x8,%rsp
  0x0000000000400fd2 <+4>:     mov    %edx,%eax     // eax = 0xe
  0x0000000000400fd4 <+6>:     sub    %esi,%eax     // eax -= 0 (???)
  0x0000000000400fd6 <+8>:     mov    %eax,%ecx     // ecx = eax
  0x0000000000400fd8 <+10>:    shr    $0x1f,%ecx    // ecx >> 31 (LSR)
  0x0000000000400fdb <+13>:    add    %ecx,%eax     // eax += ecx
  0x0000000000400fdd <+15>:    sar    %eax          // eax >> 1 (ASR)
  0x0000000000400fdf <+17>:    lea    (%rax,%rsi,1),%ecx      // ecx = rax + rsi * 1
  0x0000000000400fe2 <+20>:    cmp    %edi,%ecx               
  0x0000000000400fe4 <+22>:    jle    0x400ff2 <func4+36>     // ecx <= edi
  0x0000000000400fe6 <+24>:    lea    -0x1(%rcx),%edx         // edx = rcx - 1
  0x0000000000400fe9 <+27>:    callq  0x400fce <func4>
  0x0000000000400fee <+32>:    add    %eax,%eax
  0x0000000000400ff0 <+34>:    jmp    0x401007 <func4+57>
  0x0000000000400ff2 <+36>:    mov    $0x0,%eax
  0x0000000000400ff7 <+41>:    cmp    %edi,%ecx               
  0x0000000000400ff9 <+43>:    jge    0x401007 <func4+57>     // ecx >= edi
  0x0000000000400ffb <+45>:    lea    0x1(%rcx),%esi
  0x0000000000400ffe <+48>:    callq  0x400fce <func4>
  0x0000000000401003 <+53>:    lea    0x1(%rax,%rax,1),%eax
  0x0000000000401007 <+57>:    add    $0x8,%rsp
  0x000000000040100b <+61>:    retq   

    a recursion program like this:
    int fun(int a1, int a2, int x){     // a1 = 0xe, a2 = 0
        int b = (a1 - a2) >> 31;
        int result = ((a1-a2) + b) >> 1;
        b = result + a2;
        if(b == x) return 0;
        if(b < x) {
            result = fun(a1, b + 1, x);
            return result * 2 + 1;
        }else{
            result = fun(b - 1, a2, x);
            return result * 2;
        }
    }
    and we need to make the result be 0, so the answer is:
    0 0
    1 0 
    3 0
    7 0

